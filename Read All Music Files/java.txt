package com.example.idrisi

import android.Manifest
import android.content.ContentResolver
import android.content.ContentUris
import android.content.pm.PackageManager
import android.database.Cursor
import android.net.Uri
import android.os.Bundle
import android.provider.ContactsContract
import android.provider.MediaStore
import android.view.View
import android.widget.ArrayAdapter
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import kotlinx.android.synthetic.main.activity_main.*

class MainActivity : AppCompatActivity() {

    lateinit var alnames : ArrayList<String>
    lateinit var alUris : ArrayList<String>
    val readStoragePermission = Manifest.permission.READ_EXTERNAL_STORAGE

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        alnames = ArrayList()
        alUris = ArrayList()

        if (ContextCompat.checkSelfPermission(this,readStoragePermission)==PackageManager.PERMISSION_GRANTED){
            getAllMusicFiles()
        }else{
            ActivityCompat.requestPermissions(this, arrayOf(readStoragePermission),100)
        }
    }

    private fun getAllMusicFiles() {
       val cr:ContentResolver = contentResolver
        val musicUri : Uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI
        val selection : String = MediaStore.Audio.Media.IS_MUSIC+"!=0"
        val sortOrder : String = MediaStore.Audio.Media.TITLE+" ASC"

        val cursor : Cursor? = cr.query(musicUri,null,selection,null,sortOrder)


        if (cursor != null){

            while (cursor.moveToNext()){
                val title : String = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.TITLE))
                val id : Long =cursor.getLong(cursor.getColumnIndex(MediaStore.Audio.Media._ID))
                val uri : Uri  = ContentUris.withAppendedId(musicUri,id)

                alnames.add(title)
                alUris.add(uri.toString())
            }
            cursor.close()
            showFilesOnList()
        }
    }

    private fun showFilesOnList() {

        val arrayAdapter : ArrayAdapter<String> = ArrayAdapter(this,android.R.layout.simple_list_item_1,alnames)
        listView.adapter=arrayAdapter

        listView.setOnItemClickListener { parent, view, position, id ->
            Toast.makeText(this,alUris.get(position),Toast.LENGTH_SHORT).show()
        }

    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if (grantResults.size>0){
            if (grantResults[0]==PackageManager.PERMISSION_GRANTED)
                getAllMusicFiles()
            else{
                Toast.makeText(this,"Read Storage Permission Required",Toast.LENGTH_SHORT).show()
                finish()
            }
        }
    }
}







