package com.mwi7.myapplication.Fragments;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.ThumbnailUtils;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.os.Handler;
import android.provider.MediaStore;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.mwi7.myapplication.Adapters.ImageAdapter;
import com.mwi7.myapplication.Adapters.VideoAdapter;
import com.mwi7.myapplication.Models.StatusModel;
import com.mwi7.myapplication.R;
import com.mwi7.myapplication.Utils.MyConstant;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;

import butterknife.BindView;
import butterknife.ButterKnife;


public class VideoFragment extends Fragment {

    @BindView(R.id.recyclerViewVideo) RecyclerView recyclerView;
    @BindView(R.id.progressBarVideo) ProgressBar progressBar;
    Handler handler=new Handler();
    ArrayList<StatusModel> videoModelArrayList;
    VideoAdapter videoAdapter;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_video, container, false);
    }


    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        ButterKnife.bind(this,view);

        videoModelArrayList=new ArrayList<>();

        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new GridLayoutManager(getActivity(),2));

        getStatusVideo();
    }

    private void getStatusVideo() {

        if(MyConstant.STATUS_DIRECTORY.exists()){

            new Thread(new Runnable() {
                @Override
                public void run() {

                    File[] statusFiles=MyConstant.STATUS_DIRECTORY.listFiles();

                    if(statusFiles != null && statusFiles.length>0){
                        Arrays.sort(statusFiles);

                        for(final File statusFile : statusFiles){

                            StatusModel statusModel=new StatusModel(statusFile,statusFile.getName(),statusFile.getAbsolutePath());

                            statusModel.setThumbnail(getThumbnail(statusModel));
                            if(statusModel.isVideo()){
                                videoModelArrayList.add(statusModel);
                            }
                        }

                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                progressBar.setVisibility(View.GONE);
                                videoAdapter = new VideoAdapter(getContext(),videoModelArrayList,VideoFragment.this);
                                recyclerView.setAdapter(videoAdapter);
                                videoAdapter.notifyDataSetChanged();

                            }
                        });

                    }
                    else{
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                progressBar.setVisibility(View.GONE);
                                Toast.makeText(getContext(),"dir does not exist" , Toast.LENGTH_SHORT).show();
                            }
                        });
                    }
                }
            }).start();
        }
    }

    private Bitmap getThumbnail(StatusModel statusModel) {

        if(statusModel.isVideo()){
            return ThumbnailUtils.createVideoThumbnail(statusModel.getFile().getAbsolutePath(), MediaStore.Video.Thumbnails.MICRO_KIND);
        }else{
            return ThumbnailUtils.extractThumbnail(BitmapFactory.decodeFile(statusModel.getFile().getAbsolutePath()) , MyConstant.THUMBSIZE , MyConstant.THUMBSIZE);
        }
    }




}