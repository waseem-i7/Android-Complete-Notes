package com.example.android.quakereport;

import android.content.Context;
import android.graphics.drawable.GradientDrawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.content.ContextCompat;

import org.w3c.dom.Text;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class EarthquakeAdapter extends ArrayAdapter<Earthquake> {

    private static final String LOCATION_SEPARATOR="of";
    private String locationOffset;
    private String primaryLocation;

    public EarthquakeAdapter(@NonNull Context context,@NonNull List<Earthquake> objects) {
        super(context, 0, objects);
    }


    @NonNull
    @Override
    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
        View listItemView=convertView;
        if(listItemView==null){
            listItemView= LayoutInflater.from(getContext()).inflate(R.layout.earthquake_list_item,parent, false);
        }


        Earthquake currentEarthquake=getItem(position);

        /**
         * code to show magnitude
         */
        double magnitude= currentEarthquake.getmMagnitude();
        String formatedMagnitude= formatMagnitude(magnitude);
        TextView magnitudeView=(TextView)listItemView.findViewById(R.id.magnitude);
        magnitudeView.setText(formatedMagnitude);

        //set the proper background color on the magnitude circle.
       //fetch the background from the TextView , which is a GradientDrawale.
        GradientDrawable magnitudeCircle = (GradientDrawable) magnitudeView.getBackground();

       //Get the appropriate background color based on the current earthquake magnitude
        int magnitudeColor = getMagnitudeColor(currentEarthquake.getmMagnitude());
        magnitudeCircle.setColor(magnitudeColor);


        /**
         * code to show location
         */
        String origenalLocation = currentEarthquake.getmLocation();
        if (origenalLocation.contains(LOCATION_SEPARATOR)){
            String[] parts = origenalLocation.split(LOCATION_SEPARATOR);
            locationOffset= parts[0] + LOCATION_SEPARATOR;
            primaryLocation= parts[1];
        }else {
            locationOffset = getContext().getString(R.string.near_the);
            primaryLocation=origenalLocation;
        }
        TextView locationOffsetVIEW=listItemView.findViewById(R.id.locationOffset);
        locationOffsetVIEW.setText(locationOffset);

        TextView primaryLoctionView=(TextView)listItemView.findViewById(R.id.primaryLocation);
        primaryLoctionView.setText(primaryLocation);

        /**
         * code to show date and time
         */

        Date dateObject= new Date(currentEarthquake.getTimeInMilliseconds());

        TextView timeView =(TextView)listItemView.findViewById(R.id.time);
        String formattedTime= formatTime(dateObject);
        timeView.setText(formattedTime);


        TextView dateView=(TextView)listItemView.findViewById(R.id.date);
        String formattedDate = formatDate(dateObject);
        dateView.setText(formattedDate);



        return  listItemView;
    }

    private int getMagnitudeColor(double magnitude) {
        int magnitudeColorResourceId;
        int magnitudeFloor = (int)Math.floor(magnitude);
        switch (magnitudeFloor){
            case 0:
            case 1:
                magnitudeColorResourceId= R.color.magnitude1;
                break;
            case 2:
                magnitudeColorResourceId= R.color.magnitude2;
                break;
            case 3:
                magnitudeColorResourceId= R.color.magnitude3;
                break;
            case 4:
                magnitudeColorResourceId =R.color.magnitude4;
                break;
            case 5:
                magnitudeColorResourceId=R.color.magnitude5;
                break;
            case 6:
                magnitudeColorResourceId=R.color.magnitude6;
                break;
            case 7:
                magnitudeColorResourceId=R.color.magnitude7;
                break;
            case 8:
                magnitudeColorResourceId=R.color.magnitude8;
                break;
            case 9:
                magnitudeColorResourceId=R.color.magnitude9;
                break;
            default:
                magnitudeColorResourceId = R.color.magnitude10plus;
                break;
        }
        return ContextCompat.getColor(getContext(),magnitudeColorResourceId);
    }

    private String formatMagnitude(double magnitude) {
        DecimalFormat magnitudeFormat= new DecimalFormat("0.0");
        return magnitudeFormat.format(magnitude);
    }

    private String formatTime(Date dateObject) {
        SimpleDateFormat dateFormat= new SimpleDateFormat("LLL dd, yyyy");
        return dateFormat.format(dateObject);
    }

    private String formatDate(Date dateObject) {
        SimpleDateFormat timeFormat= new SimpleDateFormat("hh:mm a");
        return  timeFormat.format(dateObject);
    }
}












