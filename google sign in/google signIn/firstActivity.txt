package com.example.firebaseproject

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInAccount
import com.google.android.gms.auth.api.signin.GoogleSignInClient
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import com.google.android.gms.common.api.ApiException
import com.google.android.gms.tasks.Task
import kotlinx.android.synthetic.main.activity_main.*


class MainActivity : AppCompatActivity(), View.OnClickListener {

    lateinit var googleSignInClient: GoogleSignInClient



    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)


        // Configure sign-in to request the user's ID, email address, and basic
// profile. ID and basic profile are included in DEFAULT_SIGN_IN.

        // Configure sign-in to request the user's ID, email address, and basic
// profile. ID and basic profile are included in DEFAULT_SIGN_IN.
        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestEmail()
            .build()
        // Build a GoogleSignInClient with the options specified by gso.
        googleSignInClient = GoogleSignIn.getClient(this, gso);

        // Check for existing Google Sign In account, if the user is already signed in
// the GoogleSignInAccount will be non-null.

        // Check for existing Google Sign In account, if the user is already signed in
// the GoogleSignInAccount will be non-null.
        val account = GoogleSignIn.getLastSignedInAccount(this)

        if (account != null){
           goToHomeActivity(account)
        }

        btnSignIn.setOnClickListener(this)
    }




    override fun onClick(v: View?) {
        val signInIntent: Intent = googleSignInClient.getSignInIntent()
        startActivityForResult(signInIntent, 101)
    }


    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (requestCode==101 && resultCode== RESULT_OK && data !=null){
            val task : Task<GoogleSignInAccount> = GoogleSignIn.getSignedInAccountFromIntent(data)

            try{

                // The Task returned from this call is always completed, no need to attach
                // a listener.
                val account: GoogleSignInAccount? = task.getResult(ApiException::class.java)
                goToHomeActivity(account)
            }catch (e: ApiException){
                e.printStackTrace()
                // The ApiException status code indicates the detailed failure reason.
                // Please refer to the GoogleSignInStatusCodes class reference for more information.
                Log.w("message", "signInResult:failed code=" + e.getStatusCode());

            }


        }
    }

    private fun goToHomeActivity(acct: GoogleSignInAccount?) {
        val personName: String? = acct?.getDisplayName()
        val personGivenName: String? = acct?.getGivenName()
        val personFamilyName: String? = acct?.getFamilyName()
        val personEmail: String? = acct?.getEmail()
        val personId: String? = acct?.getId()
        val personPhoto: String? = acct?.getPhotoUrl().toString()

        val intent = Intent(this, HomeActivity::class.java)
        intent.putExtra("displayName", personName)
        intent.putExtra("givenName", personGivenName)
        intent.putExtra("familyName", personFamilyName)
        intent.putExtra("email", personEmail)
        intent.putExtra("id", personId)
        intent.putExtra("photoUri",personPhoto)
        startActivity(intent)
        finish()
    }
}







