package com.example.idrisi

import android.Manifest
import android.annotation.SuppressLint
import android.content.ContentValues
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.media.AudioRecord
import android.media.MediaPlayer
import android.media.MediaRecorder
import android.net.Uri
import android.os.Bundle
import android.os.Handler
import android.os.Message
import android.provider.MediaStore
import android.view.View
import android.widget.MediaController
import android.widget.SeekBar
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import kotlinx.android.synthetic.main.activity_main.*
import java.io.File
import java.io.IOException

class MainActivity : AppCompatActivity() {

    lateinit var outputFile : String
    var recordPermission : String = Manifest.permission.RECORD_AUDIO
    var mediaRecorder: MediaRecorder?=null
    var mediaPlayer : MediaPlayer?=null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        btnPlay.setOnClickListener{
            if (swRecord.isChecked){
                Toast.makeText(this,"Stop the recording to paly",Toast.LENGTH_SHORT).show()
            }else{
                mediaPlayer = MediaPlayer()
                try {
                    mediaPlayer?.setDataSource(outputFile)
                    mediaPlayer?.prepare()
                    mediaPlayer?.start()
                    Toast.makeText(this,"Recording is Play",Toast.LENGTH_SHORT).show()

                }catch (e : IOException){
                    e.printStackTrace()
                    Toast.makeText(this,e.localizedMessage,Toast.LENGTH_SHORT).show()
                }

            }

        }


        outputFile = filesDir.absolutePath +"/myRecording.3gp"

        swRecord.setOnCheckedChangeListener { buttonView, isChecked ->
            if (isChecked){
                if (ContextCompat.checkSelfPermission(this,recordPermission)==PackageManager.PERMISSION_GRANTED) {
                    startRecording()
                    swRecord.isChecked = true
                }
                else{
                    ActivityCompat.requestPermissions(this, arrayOf(recordPermission),101)
                }
            }else{
                stopRecording()

            }
        }
    }


    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (grantResults.size>0){
            if (grantResults[0]==PackageManager.PERMISSION_GRANTED){
                startRecording()
                swRecord.isChecked=true
            }else{
                Toast.makeText(this,"Record Audio Permission Required",Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun stopRecording() {
        if (mediaPlayer !=null){
        mediaRecorder?.stop()
        mediaRecorder?.release()
        mediaRecorder=null
        Toast.makeText(this,"Recording Stopped",Toast.LENGTH_SHORT).show()

        }
    }

    private fun stopPlaying() {
        if (mediaPlayer !=null){
            mediaPlayer?.stop()
            mediaPlayer?.release()
            mediaPlayer=null
        }
    }

    private fun startRecording() {
       mediaRecorder = MediaRecorder()
        mediaRecorder?.setAudioSource(MediaRecorder.AudioSource.MIC)
        mediaRecorder?.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP)
        mediaRecorder?.setOutputFile(outputFile)
        mediaRecorder?.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)

        try {
            mediaRecorder?.prepare()
            mediaRecorder?.start()
            Toast.makeText(this,"Recording Started",Toast.LENGTH_SHORT).show()
        }catch (e : IOException){
            Toast.makeText(this,e.localizedMessage,Toast.LENGTH_SHORT).show()
            swRecord.isChecked=false
        }
    }


    override fun onStop() {
        super.onStop()
        stopRecording()
        stopPlaying()
    }

}








